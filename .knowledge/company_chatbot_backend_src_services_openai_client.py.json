{"is_source_file": true, "format": "Python", "description": "This Python module provides utilities for interfacing with the OpenAI API, including loading configuration, ensuring API key presence, and performing chat completion requests. It helps centralize API access within the backend system of a chatbot platform.", "external_files": ["os", "logging", "typing", "httpx", "pydantic"], "external_methods": ["os.environ.get", "logging.getLogger", "BaseModel", "Field", "httpx.Client"], "published": ["get_openai_settings", "ensure_openai_key", "openai_chat_completion"], "classes": [{"name": "OpenAISettings", "description": "Configuration class for OpenAI integration, holding API key, base URL, and default model."}], "methods": [{"name": "OpenAISettings get_openai_settings()", "description": "Loads OpenAI configuration from environment variables.", "scope": "", "scopeKind": ""}, {"name": "str ensure_openai_key()", "description": "Checks for the presence of a valid OPENAI_API_KEY in environment variables, raising an error if missing.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] openai_chat_completion( messages: List[Dict[str, str]], model: Optional[str] = None, temperature: float = 0.2, max_tokens: Optional[int] = 512, extra_headers: Optional[Dict[str, str]] = None, )", "description": "Performs a chat completion request to OpenAI API with provided messages and parameters.", "scope": "", "scopeKind": ""}], "calls": ["get_openai_settings", "ensure_openai_key", "httpx.Client", "client.post", "resp.json"], "search-terms": ["openai_client", "chat completion", "API key validation", "environment variables", "OpenAI API integration"], "state": 2, "file_id": 13, "knowledge_revision": 44, "git_revision": "", "ctags": [{"_type": "tag", "name": "OpenAISettings", "path": "/home/kavia/workspace/code-generation/intelligent-chatbot-platform-2899-2908/company_chatbot_backend/src/services/openai_client.py", "pattern": "/^class OpenAISettings(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "api_key", "path": "/home/kavia/workspace/code-generation/intelligent-chatbot-platform-2899-2908/company_chatbot_backend/src/services/openai_client.py", "pattern": "/^    api_key: Optional[str] = Field(default=None, description=\"OpenAI API key taken from OPENAI_A/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "variable", "scope": "OpenAISettings", "scopeKind": "class"}, {"_type": "tag", "name": "base_url", "path": "/home/kavia/workspace/code-generation/intelligent-chatbot-platform-2899-2908/company_chatbot_backend/src/services/openai_client.py", "pattern": "/^    base_url: str = Field(default=\"https:\\/\\/api.openai.com\\/v1\", description=\"OpenAI API base U/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "OpenAISettings", "scopeKind": "class"}, {"_type": "tag", "name": "default_model", "path": "/home/kavia/workspace/code-generation/intelligent-chatbot-platform-2899-2908/company_chatbot_backend/src/services/openai_client.py", "pattern": "/^    default_model: str = Field(default=os.environ.get(\"OPENAI_MODEL\", \"gpt-4o-mini\"), descriptio/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "OpenAISettings", "scopeKind": "class"}, {"_type": "tag", "name": "ensure_openai_key", "path": "/home/kavia/workspace/code-generation/intelligent-chatbot-platform-2899-2908/company_chatbot_backend/src/services/openai_client.py", "pattern": "/^def ensure_openai_key() -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "get_openai_settings", "path": "/home/kavia/workspace/code-generation/intelligent-chatbot-platform-2899-2908/company_chatbot_backend/src/services/openai_client.py", "pattern": "/^def get_openai_settings() -> OpenAISettings:$/", "language": "Python", "typeref": "typename:OpenAISettings", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/intelligent-chatbot-platform-2899-2908/company_chatbot_backend/src/services/openai_client.py", "pattern": "/^logger = logging.getLogger(\"uvicorn.error\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "openai_chat_completion", "path": "/home/kavia/workspace/code-generation/intelligent-chatbot-platform-2899-2908/company_chatbot_backend/src/services/openai_client.py", "pattern": "/^def openai_chat_completion($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( messages: List[Dict[str, str]], model: Optional[str] = None, temperature: float = 0.2, max_tokens: Optional[int] = 512, extra_headers: Optional[Dict[str, str]] = None, )"}], "hash": "58a34d8eb9d00637c9c552b0017a9c56", "format-version": 4, "code-base-name": "company_chatbot_backend", "filename": "company_chatbot_backend/src/services/openai_client.py", "fields": [{"name": "Optional[str] api_key", "scope": "OpenAISettings", "scopeKind": "class", "description": "unavailable"}, {"name": "str base_url", "scope": "OpenAISettings", "scopeKind": "class", "description": "unavailable"}, {"name": "str default_model", "scope": "OpenAISettings", "scopeKind": "class", "description": "unavailable"}, {"name": "logger = logging.getLogger(\"uvicorn.error\")", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"44": ""}]}